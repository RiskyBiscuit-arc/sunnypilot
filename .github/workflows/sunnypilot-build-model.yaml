name: sunnypilot build model

env:
  BUILD_DIR: "/data/github/openpilot"
  OUTPUT_DIR: ${{ github.workspace }}/output
  CI_DIR: ${{ github.workspace }}/release/ci
  BASE_BUILD_NUMBER: 3000
  PUBLIC_REPO_URL: "https://github.com/sunnyhaibin/sunnypilot"
  DEV_C3_SOURCE_BRANCH: "master-dev-c3"

on:
  push:
    branches: [ master, master-new, master-dev-c3, kumar-wants-gitlab-prebuilt ]
    tags: [ '*' ]
  pull_request:
    branches: [ master, master-new ]
  workflow_dispatch:
    inputs:
      extra_version:
        description: 'Extra version identifier'
        required: false
        default: ''

jobs:  
  build_model:
    runs-on: self-hosted
    outputs:
      auto_build: ${{ steps.set-env.outputs.auto_build }}
      auto_publish: ${{ steps.set-env.outputs.auto_publish }}
      new_branch: ${{ steps.set-env.outputs.new_branch }}
      version: ${{ steps.set-env.outputs.version }}
      extra_version_identifier: ${{ steps.set-env.outputs.extra_version_identifier }}

    if: |
      !contains(github.event.head_commit.message, 'wip:') && 
      !contains(github.event.head_commit.message, 'draft:')

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - run: git lfs pull

      - name: Cache SCons
        uses: actions/cache@v4
        with:
          path: ${{ env.CI_DIR }}/scons_cache
          key: scons-${{ runner.os }}-${{ runner.arch }}-${{ github.ref_name }}-model-${{ github.sha }}
          restore-keys: |
            scons-${{ runner.os }}-${{ runner.arch }}-${{ github.ref_name }}-model-
            scons-${{ runner.os }}-${{ runner.arch }}-${{ github.ref_name }}-
            scons-${{ runner.os }}-${{ runner.arch }}-

      - name: Set environment variables
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "new_branch=${GITHUB_REF_NAME}-prebuilt" >> $GITHUB_OUTPUT
            echo "extra_version_identifier=${{ github.event.inputs.extra_version || github.run_number }}" >> $GITHUB_OUTPUT
            echo "version=$(date '+%Y.%m.%d')" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "${{ env.DEV_C3_SOURCE_BRANCH }}" ]]; then
            echo "new_branch=dev-c3" >> $GITHUB_OUTPUT
            echo "extra_version_identifier=${{ github.run_number }}" >> $GITHUB_OUTPUT
            echo "auto_build=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "new_branch=staging-c3" >> $GITHUB_OUTPUT
            echo "extra_version_identifier=staging" >> $GITHUB_OUTPUT
            echo "auto_build=true" >> $GITHUB_OUTPUT
            echo "auto_publish=true" >> $GITHUB_OUTPUT
            echo "version=$(cat common/version.h | grep COMMA_VERSION | sed -e 's/[^0-9|.]//g')" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "new_branch=release-c3" >> $GITHUB_OUTPUT
            echo "extra_version_identifier=release" >> $GITHUB_OUTPUT
            echo "auto_build=true" >> $GITHUB_OUTPUT
            echo "version=$(cat common/version.h | grep COMMA_VERSION | sed -e 's/[^0-9|.]//g')" >> $GITHUB_OUTPUT
          else
            echo "version=$(date '+%Y.%m.%d')-${{ github.run_number }}" >> $GITHUB_OUTPUT
          fi
          source /etc/profile;
          export UV_PROJECT_ENVIRONMENT=${HOME}/venv
          export VIRTUAL_ENV=$UV_PROJECT_ENVIRONMENT
          printenv >> $GITHUB_ENV

      - name: Setup build environment
        run: |
          mkdir -p "${BUILD_DIR}/"
          sudo find $BUILD_DIR/ -mindepth 1 -delete
          echo "Starting build stage..."
          echo "BUILD_DIR: ${BUILD_DIR}"
          echo "CI_DIR: ${CI_DIR}"
          echo "VERSION: ${{ steps.set-env.outputs.version }}"
          echo "BASE_BUILD_NUMBER: ${{ env.BASE_BUILD_NUMBER }}"
          echo "UV_PROJECT_ENVIRONMENT: ${UV_PROJECT_ENVIRONMENT}"
          echo "VIRTUAL_ENV: ${VIRTUAL_ENV}"
          echo "-------"
          printenv

      - name: Build Model
        run: |
          scons -j$(nproc) cache_dir=${{ env.CI_DIR }}/scons_cache ${{ github.workspace }}/selfdrive/modeld

      - name: Prepare Output
        run: |
          sudo rm -rf ${OUTPUT_DIR}
          mkdir -p ${OUTPUT_DIR}
          rsync -avm \
            --include='*.dlc' \
            --include='*.thneed' \
            --include='*.pkl' \
            --include='*.onnx' \
            --exclude='*' \
            --delete-excluded \
            --chown=comma:comma \
            ./selfdrive/modeld/models/ ${OUTPUT_DIR}/

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: ${{ env.OUTPUT_DIR }}