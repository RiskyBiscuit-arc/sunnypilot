name: Nightly Branch Reset and PR Squash

env:
  DEFAULT_SOURCE_BRANCH: "master-new"
  DEFAULT_TARGET_BRANCH: "master-dev-c3-new-test"
  PR_LABEL: "dev-c3"

on:
  workflow_dispatch:
    inputs:
      source_branch:
        description: 'Source branch to reset from'
        required: true
        default: 'master-new'
        type: string
      target_branch:
        description: 'Target branch to reset and squash into'
        required: true
        default: 'master-dev-c3-new-test'
        type: string
  # schedule:
  #   - cron: '0 0 * * *'  # Run at midnight UTC

jobs:
  reset-and-squash:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set branch variables
        id: set-branches
        run: |
          # If this is a scheduled run, use defaults from env
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "SOURCE_BRANCH=${DEFAULT_SOURCE_BRANCH}" >> $GITHUB_OUTPUT
            echo "TARGET_BRANCH=${DEFAULT_TARGET_BRANCH}" >> $GITHUB_OUTPUT
          else
            # Otherwise use the workflow inputs
            echo "SOURCE_BRANCH=${{ inputs.source_branch }}" >> $GITHUB_OUTPUT
            echo "TARGET_BRANCH=${{ inputs.target_branch }}" >> $GITHUB_OUTPUT
          fi

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyGithub

      - name: Check branches exist
        id: check-branches
        run: |
          # Check if source branch exists
          if ! git ls-remote --heads origin ${{ steps.set-branches.outputs.SOURCE_BRANCH }} | grep -q "${{ steps.set-branches.outputs.SOURCE_BRANCH }}"; then
            echo "Source branch ${{ steps.set-branches.outputs.SOURCE_BRANCH }} does not exist!"
            exit 1
          fi
          
          # Make sure we have the latest source branch
          git fetch origin ${{ steps.set-branches.outputs.SOURCE_BRANCH }}
          
          # Check if target branch exists
          if ! git ls-remote --heads origin ${{ steps.set-branches.outputs.TARGET_BRANCH }} | grep -q "${{ steps.set-branches.outputs.TARGET_BRANCH }}"; then
            echo "Target branch ${{ steps.set-branches.outputs.TARGET_BRANCH }} does not exist, creating it from ${{ steps.set-branches.outputs.SOURCE_BRANCH }}"
            git checkout -b ${{ steps.set-branches.outputs.TARGET_BRANCH }} origin/${{ steps.set-branches.outputs.SOURCE_BRANCH }}
            git push origin ${{ steps.set-branches.outputs.TARGET_BRANCH }}
          else
            # Fetch target branch if it exists
            git fetch origin ${{ steps.set-branches.outputs.TARGET_BRANCH }}
          fi

      - name: Reset target branch
        run: |
          # Reset target branch to source branch state
          echo "Resetting ${{ steps.set-branches.outputs.TARGET_BRANCH }} to match ${{ steps.set-branches.outputs.SOURCE_BRANCH }}"
          git checkout origin/${{ steps.set-branches.outputs.SOURCE_BRANCH }}
          git checkout -B ${{ steps.set-branches.outputs.TARGET_BRANCH }}
          
          # Don't push yet, we'll do it after squashing PRs

      - name: Get PRs to squash
        id: get-prs
        run: |
          # Use GitHub API to get PRs with specific label
          PR_LIST=$(gh api graphql -f query='
            query($label:String!) {
              search(query: $label, type:ISSUE, first:100) {
                nodes {
                  ... on PullRequest {
                    number
                    headRefName
                    title
                  }
                }
              }
            }' -F label="is:pr is:open label:${PR_LABEL}")
          
          echo "PR_LIST=${PR_LIST}" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Process PRs
        run: |
          ${{ github.workspace }}/release/ci/squash_and_merge_prs.py \
            --pr-data '${{ steps.get-prs.outputs.PR_LIST }}' \
            --target-branch ${{ steps.set-branches.outputs.TARGET_BRANCH }} \
            --squash-script-path '${{ github.workspace }}/release/ci/squash_and_merge.py'

      - name: Push changes
        run: |
          # First push the reset branch with force
          if ! git push origin ${{ steps.set-branches.outputs.TARGET_BRANCH }} --force; then
            echo "Failed to push changes to ${{ steps.set-branches.outputs.TARGET_BRANCH }}"
            exit 1
          fi
          
          echo "Branch ${{ steps.set-branches.outputs.TARGET_BRANCH }} has been reset and updated with squashed PRs"